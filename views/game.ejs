<!DOCTYPE html>
<html>

<head>
  <title><%= messageNotificationsLength > 0 ? "(" + messageNotificationsLength + ") " : "" %> <%= config.siteName %> - Game <%= game.gameId %></title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet" href="/chessboardjs/css/chessboard-0.3.0.css">
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.5.9/css/mdb.min.css" rel="stylesheet">

  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.13.0/umd/popper.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/js/bootstrap.min.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mdbootstrap/4.5.9/js/mdb.min.js"></script>
  <script src="/chessboardjs/js/chessboard-0.3.0.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.2/chess.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/1.7.3/socket.io.js"></script>
  <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/countdown/2.6.0/countdown.js"></script>
  <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
</head>

<body>
  <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-5">
    <a class="navbar-brand" href="/"><%= config.siteName %></a>

    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#basicExampleNav" aria-controls="basicExampleNav"
      aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="basicExampleNav">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item">
          <a class="nav-link" href="/">Home</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/messages">Messages 
            <span id="messages" class="badge badge-light <%= messageNotificationsLength > 0 ? '' : 'd-none' %>"><%= messageNotificationsLength %></span>
          </a>
        </li>
        <li class="nav-item active">
          <a class="nav-link" href="/games">Games</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/clubs">Chess Clubs</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="/logout">Logout</a>
        </li>
      </ul>
      <ul class="navbar-nav ml-auto">
        <% if (user.isAdmin) { %>
          <li class="nav-item">
            <a class="nav-link" href="/admin">Admin Console</a>
          </li>
        <% } %>
        <li class="nav-item">
          <a class="nav-link" href="/profile/<%= user.name %>">Profile</a>
        </li>
      </ul>
    </div>
  </nav>

  <div class="text-center d-flex justify-content-around flex-wrap">
    <div>
      <a href="/profile/<%= white.name %>"><div class="profile-img white-profile m-auto" title="<%= white.name %>"></div></a>
      <p id="wTime" class="<%= game[game.currentTurn] == white.name ? 'font-weight-bold' : '' %>"><%= game.wTime %></p>
    </div>
    <div>
      <a href="/profile/<%= black.name %>"><div class="profile-img black-profile m-auto" title="<%= black.name %>"></div></a>
      <p id="bTime" class="<%= game[game.currentTurn] == black.name ? 'font-weight-bold' : '' %>"><%= game.bTime %></p>
    </div>
  </div>

  <div id="board"></div>

  <div id="chat">
    <div id="chatMessages" class="p-3">
    </div>

    <div class="input-group mt-3">
      <input type="text" id="chatBox" class="form-control" placeholder="Type a message as <%=user.name%>" onkeyup="inputKeyUp(event)">
      <div class="input-group-append">
        <span class="input-group-text" onClick="sendMessage()"><i class="fa fa-paper-plane"></i></span>
      </div>
    </div>

  </div>

  <hr>

  <p class="text-center m-2">Status:
    <span id="status"></span>
  </p>
  <p class="text-center m-2">FEN:
    <span id="fen"></span>
  </p>

  <div class="m-3 d-flex justify-content-center">
    <% let event = "" %>
    <% let convertedEvent = "" %>

    <% if (game.drawRequested && game.drawRequestedBy == user.name) { %>
        <% event = "revokeDraw" %>
        <% convertedEvent = "Revoke Draw" %>
      <% } else if (game.drawRequested && game.drawRequested !== user.name) { %>
        <% event = "acceptDraw" %>
        <% convertedEvent = "Accept Draw" %>
      <% } else { %>
        <% event = "requestDraw" %>
        <% convertedEvent = "Offer Draw" %>
      <% } %>

    <button class="btn btn-primary m-2" id="resign" onClick="gameEvent('resign')"><i class="fas fa-flag mr-1"></i> Resign</button>
    <button class="btn btn-primary m-2" id="draw" onClick="gameEvent('<%= event %>')"><i class="fas fa-handshake mr-1"></i> <span id="drawText"><%= convertedEvent %></span></button>
    <% if (!game.isOver && game.drawRequested && game.drawRequestedBy !== user.name) { %>
      <button class="btn btn-primary m-2" id="declineDraw" onClick="gameEvent('revokeDraw')"><i class="fas fa-handshake mr-1"></i> Decline Draw</button>
    <% } %>
  </div>
</body>

<style>
  body {
    background-color: #fafafa;
  }

  #board {
    max-width: 35%;
    min-width: 600px;
    margin: 50px auto 10px auto !important;
  }

  #chat {
    max-width: 35%;
    min-width: 600px;
    margin: 25px auto 10px auto !important;
  }

  #chatMessages {
    max-height: 200px;
    overflow-y: scroll;
  }

  .profile-img {
    width: 120px;
    height: 120px;
    border-radius: 60px;

    background-size: cover;
    background-position: center center;
  }

  .white-profile {
    background-image: url("<%= white.profile.picture %>");
  }

  .black-profile {
    background-image: url("<%= black.profile.picture %>");
  }
</style>

<script>
  var board,
  game = new Chess(),
  fen = game.fen(),
  socket = io.connect(window.location.host),
  moveColor = "White",
  statusEl = $('#status'),
  fenEl = $('#fen'),
  gameObj = <%-JSON.stringify(game)%>,
  timeCountdown,
  user = <%-JSON.stringify(user.name)%>;

  function inputKeyUp(e) {
    if (e.key === 'Enter') {
      sendMessage();
    }
  }

  sendMessage = () => {
    if (document.getElementById("chatBox").value !== "") {
      axios.post('/api/gameChat', {
        message: document.getElementById("chatBox").value,
        id: gameObj.gameId
      })
      .then(function (response) {
        socket.emit("chat", {
          message: document.getElementById("chatBox").value,
          user: user,
          gameId: gameObj.gameId
        });

        document.getElementById("chatBox").value = "";
      })
      .catch(function (error) {
        console.log(error);
      });  
    }
  }
 
  var onDragStart = function (source, piece, position, orientation) {
    if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
      gameObj[game.turn()] !== user ||
      gameObj.isOver)  {
      return false;
    }
  };

  var onDrop = function (source, target) {
    var move = game.move({
      from: source,
      to: target,
      promotion: 'q' // NOTE: always promote to a queen for example simplicity
    });

    if (move === null) {
      return 'snapback';
    } else {
      axios.post('/api/gameMove', {
        fen: game.fen(),
        currentTurn: game.turn(),
        gameId: gameObj.gameId
      })
      .then(function (response) {
        socket.emit("move", {
          fen: game.fen(),
          turn: game.turn(),
          gameId: gameObj.gameId
        });
      })
      .catch(function (error) {
        console.log(error);
      });
    }
  };

  var updateStatus = function () {
    let status = '';

    if (!gameObj.isOver) {
      clearInterval(timeCountdown);
      setCountdown(game.turn());
    } else {
      $("#chatBox").prop('disabled', true);
      $("#resign").addClass("d-none");
      $("#draw").addClass("d-none");
    }

    if (game.in_checkmate()) {
      status = 'Game over, ' +  (gameObj[game.turn()] !== user ? gameObj[game.turn()] + ' is in checkmate.' : "you are in checkmate");
    } else if (game.in_draw()) {
      status = 'Game over, drawn position';
    } else if (gameObj.isOver) {
      status = 'Game over, winner is ' + gameObj.winner;
    } else {
      status = gameObj[game.turn()] !== user ? gameObj[game.turn()] + "'s turn. " : "Your turn. ";

      if (game.in_check()) {
        status += (gameObj[game.turn()] !== user ? gameObj[game.turn()] + ' is in check.' : "You are in check");
      }
    }

    statusEl.html(status);
    fenEl.html(fen);
  };

  var cfg = {
    draggable: true,
    position: gameObj.fen,
    onDragStart: onDragStart,
    onDrop: onDrop,
  };

  board = ChessBoard('board', cfg);
  game.load(gameObj.fen);

  //Flip board if user is black
  if (gameObj.b == user) {
    board.orientation("black");
  }

  //Load messages from DB
  let messages = gameObj.messages

  for (var i = messages.length - 1; i >= 0; i--) {
    document.getElementById("chatMessages").innerHTML += "<p class='text-center'><b class='font-weight-bold'>" + messages[i].user + ": </b>" + messages[i].message + "</p>";
  }

  //Handle socket.io stuff
  socket.on("move", (data) => {
    if (data.gameId == gameObj.gameId) {
      game.load(data.fen);
      board.position(data.fen);
      fen = data.fen;

      if (game.in_checkmate()) {
        gameEvent("checkmate");
      } else if (game.in_draw()) {
        gameEvent("draw");
      }
  
      updateStatus();
    }
  });

  socket.on("chat", (data) => {
    if (data.gameId == gameObj.gameId) {
      document.getElementById("chatMessages").insertAdjacentHTML("afterbegin", "<p class='text-center'><b class='font-weight-bold'>" + data.user + ": </b>" + data.message + "</p>");
    }
  });

  socket.on("message", (data) => {
    console.log(data);
    if (data.to == user) {
      if (document.getElementById("messages").getAttribute("class").split(" ").indexOf("d-none") !== -1) {
        $("#messages").removeClass("d-none");
      }

      if (document.title[0] !== "(") {
        document.title = "(0) " + document.title;
      }
      document.getElementById("messages").innerHTML = Number(document.getElementById("messages").innerHTML) + 1;
      document.title = document.title.replace(document.title[1], Number(document.title[1]) + 1);      
    }
  });

  let bTimeMilliseconds = Number(<%- JSON.stringify(game["b" + "Time"]) %>);
  let wTimeMilliseconds = Number(<%- JSON.stringify(game["w" + "Time"]) %>);

  setCountdown = (turn) => {
    if (wTimeMilliseconds > 0 || bTimeMilliseconds > 0) {
      timeCountdown = countdown(Date.now() + (turn == "w" ? wTimeMilliseconds : bTimeMilliseconds), (ts) => {
        document.getElementById(turn + "Time").innerHTML = (ts.weeks > 0 ? ts.weeks + " Weeks " : "") + (ts.days > 0 ? ts.days + " Days " : "") + (ts.hours > 0 ? ts.hours + " Hours " : "") + ts.minutes + " Minutes";

        switch(turn) {
          case "w":
            wTimeMilliseconds -= 1000;
            break;
          case "b":
            bTimeMilliseconds -= 1000;
            break;
        }

        if (ts.value >= 0) {
          gameObj.isOver = true;
        }
      }, null, countdown.WEEKS | countdown.DAYS | countdown.HOURS | countdown.MINUTES | countdown.SECONDS);
    }
  }
  
  setCountdown("w");
  clearInterval(timeCountdown);
  setCountdown("b");
  clearInterval(timeCountdown);

  gameEvent = (event) => {
    console.log("Event: " + event);

    if (event == "resign") {
      swal({
        title: "Are you sure?",
        text: "Are you sure you want to resign from the game?",
        icon: "warning",
        buttons: true,
        dangerMode: true,
      })
      .then((willResign) => {
        if (willResign) {
          submitGameEvent("resign")
        }
      });
    } else if (event == "acceptDraw") {
      swal({
        title: "Are you sure?",
        text: "Are you sure you want to accept the draw?",
        icon: "warning",
        buttons: true,
        dangerMode: true,
      })
      .then((willResign) => {
        if (willResign) {
          submitGameEvent("acceptDraw")
        }
      });
    } else {
      submitGameEvent(event);
    }
  }

  submitGameEvent = (event) => {
    axios.post('/api/gameEvent', {
      event: event,
      id: gameObj.gameId
    })
    .then(function (response) {
      console.log(response);

      if (event == "resign" || event == "checkmate" || event == "acceptDraw" ) {
        window.location = window.location;
        gameObj.isOver = true;
      } else if (event == "requestDraw") {
        document.getElementById("drawText").innerHTML = "Revoke Draw";
        $("#draw").attr('onClick', 'gameEvent("revokeDraw")');
      } else if (event == "revokeDraw") {
        document.getElementById("drawText").innerHTML = "Offer Draw";
        $("#draw").attr('onClick', 'gameEvent("requestDraw")');

        if (document.getElementById("declineDraw")) {
          $("#declineDraw").addClass("d-none");
        }
      }
    })
    .catch(function (error) {
      console.log(error);
    });
  }

  updateStatus();
</script>

</html>